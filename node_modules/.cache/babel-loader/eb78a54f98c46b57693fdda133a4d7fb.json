{"ast":null,"code":"import _toConsumableArray from\"/Users/oleksijlyashenko/Documents/projects_from_git/todo-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";import _slicedToArray from\"/Users/oleksijlyashenko/Documents/projects_from_git/todo-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import React,{useEffect,useState}from'react';import classNames from'classnames';import TodoItem from'./TodoItem';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";var TodoList=function TodoList(_ref){var items=_ref.items,deleteTodo=_ref.deleteTodo,changeComplete=_ref.changeComplete,allComplete=_ref.allComplete,clearCompleted=_ref.clearCompleted,changeEditing=_ref.changeEditing,changeItem=_ref.changeItem;var _useState=useState(items),_useState2=_slicedToArray(_useState,2),newArr=_useState2[0],setNewArr=_useState2[1];var _useState3=useState({all:true,active:false,completed:false}),_useState4=_slicedToArray(_useState3,2),filterAll=_useState4[0],setFilterAll=_useState4[1];var todosFilter=function todosFilter(condition){switch(condition){case'all':return setNewArr(items);case'active':return setNewArr(_toConsumableArray(items).filter(function(todo){return todo.completed!==true;}));case'completed':return setNewArr(_toConsumableArray(items).filter(function(todo){return todo.completed===true;}));default:return 0;}};useEffect(function(){setNewArr(items);},[items]);return/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsxs(\"section\",{className:\"main\",children:[/*#__PURE__*/_jsx(\"input\",{type:\"checkbox\",id:\"toggle-all\",className:\"toggle-all\",onChange:function onChange(){return allComplete();}}),/*#__PURE__*/_jsx(\"label\",{htmlFor:\"toggle-all\",children:\"Mark all as complete\"}),/*#__PURE__*/_jsx(\"ul\",{className:\"todo-list\",children:newArr.map(function(todo){return/*#__PURE__*/_jsx(TodoItem,{todo:todo,deleteTodo:deleteTodo,changeComplete:changeComplete,changeEditing:changeEditing,changeItem:changeItem});})})]}),/*#__PURE__*/_jsxs(\"footer\",{className:\"footer\",children:[/*#__PURE__*/_jsxs(\"span\",{className:\"todo-count\",children:[_toConsumableArray(items).filter(function(x){return x.completed===false;}).length,' ',\"items left\"]}),/*#__PURE__*/_jsxs(\"ul\",{className:\"filters\",children:[/*#__PURE__*/_jsx(\"li\",{children:/*#__PURE__*/_jsx(\"a\",{href:\"#/\",className:classNames({selected:filterAll.all}),onClick:function onClick(){todosFilter('all');setFilterAll({all:true,active:false,completed:false});},children:\"All\"})}),/*#__PURE__*/_jsx(\"li\",{children:/*#__PURE__*/_jsx(\"a\",{href:\"#/active\",className:classNames({selected:filterAll.active}),onClick:function onClick(){todosFilter('active');setFilterAll({all:false,active:true,completed:false});},children:\"Active\"})}),/*#__PURE__*/_jsx(\"li\",{children:/*#__PURE__*/_jsx(\"a\",{href:\"#/completed\",className:classNames({selected:filterAll.completed}),onClick:function onClick(){todosFilter('completed');setFilterAll({all:false,active:false,completed:true});},children:\"Completed\"})})]}),_toConsumableArray(items).find(function(x){return x.completed;})&&/*#__PURE__*/_jsx(\"button\",{type:\"button\",className:\"clear-completed\",onClick:function onClick(){return clearCompleted();},children:\"Clear completed\"})]})]});};export default TodoList;","map":{"version":3,"sources":["/Users/oleksijlyashenko/Documents/projects_from_git/todo-app/src/components/TodoList.jsx"],"names":["React","useEffect","useState","classNames","TodoItem","TodoList","items","deleteTodo","changeComplete","allComplete","clearCompleted","changeEditing","changeItem","newArr","setNewArr","all","active","completed","filterAll","setFilterAll","todosFilter","condition","filter","todo","map","x","length","selected","find"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport TodoItem from './TodoItem';\n\nconst TodoList = ({\n  items,\n  deleteTodo,\n  changeComplete,\n  allComplete,\n  clearCompleted,\n  changeEditing,\n  changeItem,\n}) => {\n  const [newArr, setNewArr] = useState(items);\n  const [filterAll, setFilterAll] = useState({\n    all: true,\n    active: false,\n    completed: false,\n  });\n\n  const todosFilter = (condition) => {\n    switch (condition) {\n      case 'all':\n        return setNewArr(items);\n      case 'active':\n        return setNewArr([...items].filter(\n          todo => todo.completed !== true,\n        ));\n      case 'completed':\n        return setNewArr([...items].filter(\n          todo => todo.completed === true,\n        ));\n      default:\n        return 0;\n    }\n  };\n\n  useEffect(() => {\n    setNewArr(items);\n  }, [items]);\n\n  return (\n    <>\n      <section className=\"main\">\n        <input\n          type=\"checkbox\"\n          id=\"toggle-all\"\n          className=\"toggle-all\"\n          onChange={() => allComplete()}\n        />\n        <label htmlFor=\"toggle-all\">Mark all as complete</label>\n\n        <ul className=\"todo-list\">\n          {newArr.map(todo => (\n            <TodoItem\n              todo={todo}\n              deleteTodo={deleteTodo}\n              changeComplete={changeComplete}\n              changeEditing={changeEditing}\n              changeItem={changeItem}\n            />\n          ))}\n        </ul>\n      </section>\n\n      <footer className=\"footer\">\n        <span className=\"todo-count\">\n          {[...items].filter(x => x.completed === false).length}\n          {' '}\n          items left\n        </span>\n\n        <ul className=\"filters\">\n          <li>\n            <a\n              href=\"#/\"\n              className={classNames({ selected: filterAll.all })}\n              onClick={() => {\n                todosFilter('all');\n                setFilterAll({\n                  all: true,\n                  active: false,\n                  completed: false,\n                });\n              }}\n            >\n              All\n            </a>\n          </li>\n\n          <li>\n            <a\n              href=\"#/active\"\n              className={classNames({ selected: filterAll.active })}\n              onClick={() => {\n                todosFilter('active');\n                setFilterAll({\n                  all: false,\n                  active: true,\n                  completed: false,\n                });\n              }}\n            >\n              Active\n            </a>\n          </li>\n\n          <li>\n            <a\n              href=\"#/completed\"\n              className={classNames({ selected: filterAll.completed })}\n              onClick={() => {\n                todosFilter('completed');\n                setFilterAll({\n                  all: false,\n                  active: false,\n                  completed: true,\n                });\n              }}\n            >\n              Completed\n            </a>\n          </li>\n        </ul>\n\n        {[...items].find(x => x.completed) && (\n          <button\n            type=\"button\"\n            className=\"clear-completed\"\n            onClick={() => clearCompleted()}\n          >\n            Clear completed\n          </button>\n        )}\n      </footer>\n    </>\n  );\n};\n\nTodoList.propTypes = {\n  items: PropTypes.arrayOf().isRequired,\n  deleteTodo: PropTypes.func.isRequired,\n  changeComplete: PropTypes.func.isRequired,\n  allComplete: PropTypes.func.isRequired,\n  clearCompleted: PropTypes.func.isRequired,\n  changeEditing: PropTypes.func.isRequired,\n  changeItem: PropTypes.func.isRequired,\n};\n\nexport default TodoList;\n"]},"metadata":{},"sourceType":"module"}