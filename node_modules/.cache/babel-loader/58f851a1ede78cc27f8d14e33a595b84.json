{"ast":null,"code":"var _jsxFileName = \"/Users/oleksijlyashenko/Documents/React/react_todo-app/src/components/TodoList.jsx\",\n    _s = $RefreshSig$();\n\n/* eslint-disable jsx-a11y/label-has-associated-control */\nimport React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport TodoItem from './TodoItem';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst TodoList = _ref => {\n  _s();\n\n  let {\n    items,\n    deleteTodo,\n    changeComplete,\n    allComplete,\n    clearCompleted,\n    changeItem,\n    changeEditing\n  } = _ref;\n  const [newArr, setNewArr] = useState(items);\n  const [filterAll, setFilterAll] = useState({\n    all: true,\n    active: false,\n    completed: false\n  });\n\n  const todosFilter = condition => {\n    switch (condition) {\n      case 'all':\n        return setNewArr(items);\n\n      case 'active':\n        return setNewArr([...items].filter(todo => todo.completed !== true));\n\n      case 'completed':\n        return setNewArr([...items].filter(todo => todo.completed === true));\n\n      default:\n        return 0;\n    }\n  };\n\n  useEffect(() => {\n    setNewArr(items);\n  }, [items]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"section\", {\n      className: \"main\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"checkbox\",\n        id: \"toggle-all\",\n        className: \"toggle-all\",\n        onChange: () => allComplete()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"toggle-all\",\n        children: \"Mark all as complete\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        className: \"todo-list\",\n        children: newArr.map(todo => /*#__PURE__*/_jsxDEV(TodoItem, {\n          todo: todo,\n          deleteTodo: deleteTodo,\n          changeComplete: changeComplete\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"footer\", {\n      className: \"footer\",\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"todo-count\",\n        children: [[...items].filter(x => x.completed === false).length, ' ', \"items left\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        className: \"filters\",\n        children: [/*#__PURE__*/_jsxDEV(\"li\", {\n          children: /*#__PURE__*/_jsxDEV(\"a\", {\n            href: \"#/\",\n            className: classNames({\n              selected: filterAll.all\n            }),\n            onClick: () => {\n              todosFilter('all');\n              setFilterAll({\n                all: true,\n                active: false,\n                completed: true\n              });\n            },\n            children: \"All\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 75,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: /*#__PURE__*/_jsxDEV(\"a\", {\n            href: \"#/active\",\n            className: classNames({\n              selected: filterAll.active\n            }),\n            onClick: () => {\n              todosFilter('active');\n              setFilterAll({\n                all: false,\n                active: true,\n                completed: false\n              });\n            },\n            children: \"Active\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: /*#__PURE__*/_jsxDEV(\"a\", {\n            href: \"#/completed\",\n            className: classNames({\n              selected: filterAll.completed\n            }),\n            onClick: () => {\n              todosFilter('completed');\n              setFilterAll({\n                all: false,\n                active: false,\n                completed: true\n              });\n            },\n            children: \"Completed\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 109,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }, this), [...items].find(x => x.completed) && /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        className: \"clear-completed\",\n        onClick: () => clearCompleted(),\n        children: \"Clear completed\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(TodoList, \"NhZ6tQJWlJQ4vrTI0abTMSknEjs=\");\n\n_c = TodoList;\nTodoList.propTypes = {\n  items: PropTypes.arrayOf().isRequired,\n  deleteTodo: PropTypes.func.isRequired,\n  changeComplete: PropTypes.func.isRequired,\n  allComplete: PropTypes.func.isRequired,\n  clearCompleted: PropTypes.func.isRequired,\n  changeItem: PropTypes.func.isRequired\n};\nexport default TodoList;\n\nvar _c;\n\n$RefreshReg$(_c, \"TodoList\");","map":{"version":3,"sources":["/Users/oleksijlyashenko/Documents/React/react_todo-app/src/components/TodoList.jsx"],"names":["React","useEffect","useState","PropTypes","classNames","TodoItem","TodoList","items","deleteTodo","changeComplete","allComplete","clearCompleted","changeItem","changeEditing","newArr","setNewArr","filterAll","setFilterAll","all","active","completed","todosFilter","condition","filter","todo","map","x","length","selected","find","propTypes","arrayOf","isRequired","func"],"mappings":"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","sourcesContent":["/* eslint-disable jsx-a11y/label-has-associated-control */\nimport React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport TodoItem from './TodoItem';\n\nconst TodoList = ({\n  items,\n  deleteTodo,\n  changeComplete,\n  allComplete,\n  clearCompleted,\n  changeItem,\n  changeEditing,\n}) => {\n  const [newArr, setNewArr] = useState(items);\n  const [filterAll, setFilterAll] = useState({\n    all: true,\n    active: false,\n    completed: false,\n  });\n\n  const todosFilter = (condition) => {\n    switch (condition) {\n      case 'all':\n        return setNewArr(items);\n      case 'active':\n        return setNewArr([...items].filter(\n          todo => todo.completed !== true,\n        ));\n      case 'completed':\n        return setNewArr([...items].filter(\n          todo => todo.completed === true,\n        ));\n      default:\n        return 0;\n    }\n  };\n\n  useEffect(() => {\n    setNewArr(items);\n  }, [items]);\n\n  return (\n    <>\n      <section className=\"main\">\n        <input\n          type=\"checkbox\"\n          id=\"toggle-all\"\n          className=\"toggle-all\"\n          onChange={() => allComplete()}\n        />\n        <label htmlFor=\"toggle-all\">Mark all as complete</label>\n\n        <ul className=\"todo-list\">\n          {newArr.map(todo => (\n            <TodoItem\n              todo={todo}\n              deleteTodo={deleteTodo}\n              changeComplete={changeComplete}\n            />\n          ))}\n        </ul>\n      </section>\n\n      <footer className=\"footer\">\n        <span className=\"todo-count\">\n          {[...items].filter(x => x.completed === false).length}\n          {' '}\n          items left\n        </span>\n\n        <ul className=\"filters\">\n          <li>\n            <a\n              href=\"#/\"\n              className={classNames({ selected: filterAll.all })}\n              onClick={() => {\n                todosFilter('all');\n                setFilterAll({\n                  all: true,\n                  active: false,\n                  completed: true,\n                });\n              }}\n            >\n              All\n            </a>\n          </li>\n\n          <li>\n            <a\n              href=\"#/active\"\n              className={classNames({ selected: filterAll.active })}\n              onClick={() => {\n                todosFilter('active');\n                setFilterAll({\n                  all: false,\n                  active: true,\n                  completed: false,\n                });\n              }}\n            >\n              Active\n            </a>\n          </li>\n\n          <li>\n            <a\n              href=\"#/completed\"\n              className={classNames({ selected: filterAll.completed })}\n              onClick={() => {\n                todosFilter('completed');\n                setFilterAll({\n                  all: false,\n                  active: false,\n                  completed: true,\n                });\n              }}\n            >\n              Completed\n            </a>\n          </li>\n        </ul>\n\n        {[...items].find(x => x.completed) && (\n          <button\n            type=\"button\"\n            className=\"clear-completed\"\n            onClick={() => clearCompleted()}\n          >\n            Clear completed\n          </button>\n        )}\n      </footer>\n    </>\n  );\n};\n\nTodoList.propTypes = {\n  items: PropTypes.arrayOf().isRequired,\n  deleteTodo: PropTypes.func.isRequired,\n  changeComplete: PropTypes.func.isRequired,\n  allComplete: PropTypes.func.isRequired,\n  clearCompleted: PropTypes.func.isRequired,\n  changeItem: PropTypes.func.isRequired,\n};\n\nexport default TodoList;\n"]},"metadata":{},"sourceType":"module"}